using BotTemplate.Models.Telegram;
using Neurointegration.Api.DataModels.Models;
using Telegram.Bot.Types.ReplyMarkups;

namespace BotTemplate.Services.Telegram.Messages.Register;

public static class RoutineMessage
{
    public static Message CurrentRoutines(List<WeekRoutineAction> routineActions)
    {
        var listActions = routineActions.Select((action, i) => action with
        {
            Action = $"{action.Action}: {CommandsConstants.DeleteRoutineAction(i)}"
        }).ToArray();
        var lifeActions = listActions.Where(action => action.Type == RoutineType.Life).Select(x => x.Action).ToArray();
        var driveActions = listActions.Where(action => action.Type == RoutineType.Drive).Select(x => x.Action)
            .ToArray();
        var pleasureActions = listActions.Where(action => action.Type == RoutineType.Pleasure).Select(x => x.Action)
            .ToArray();


        var text = $@"–†—É—Ç–∏–Ω–Ω—ã–µ –¥–µ–ª–∞:
üö∂‚Äç‚ôÇÔ∏è –õ–∞–π—Ñ
–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–µ–ª–∞: {CommandsConstants.AddRoutineAction(RoutineType.Life)}
–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ä—É—Ç–∏–Ω–Ω–æ–µ –¥–µ–ª–æ:
{string.Join("\n", lifeActions)}{(lifeActions.Length != 0 ? "\n" : "")}
üöÄ –î—Ä–∞–π–≤
–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–µ–ª–∞: {CommandsConstants.AddRoutineAction(RoutineType.Drive)}
–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ä—É—Ç–∏–Ω–Ω–æ–µ –¥–µ–ª–æ:
{string.Join("\n", driveActions)}{(driveActions.Length != 0 ? "\n" : "")}
üíÜ‚Äç‚ôÄÔ∏è –ö–∞–π—Ñ
–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–µ–ª–∞: {CommandsConstants.AddRoutineAction(RoutineType.Pleasure)}
–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ä—É—Ç–∏–Ω–Ω–æ–µ –¥–µ–ª–æ:
{string.Join("\n", pleasureActions)}{(pleasureActions.Length != 0 ? "\n" : "")}";

        var cancelButton = new InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å")
        {
            CallbackData = CommandsConstants.CancelEditRoutineActions
        };

        var buttons = new[] {cancelButton};
        var inline = new InlineKeyboardMarkup(buttons);

        return new Message(text, inline);
    }

    public static Message AddRoutinesMessage(RoutineType routineType)
    {
        var type = routineType switch
        {
            RoutineType.Life => "–ª–∞–π—Ñ–∞",
            RoutineType.Pleasure => "–∫–∞–π—Ñ–∞",
            RoutineType.Drive => "–¥—Ä–∞–π–≤–∞",
            _ => throw new ArgumentOutOfRangeException(nameof(routineType), routineType, null)
        };
        var text =
            $"–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–µ —Ä—É—Ç–∏–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è {type}. –û–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ—á–∫–µ";

        var cancelButton = new InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É")
        {
            CallbackData = CommandsConstants.ReturnToRoutineActionsList
        };

        var buttons = new[] {cancelButton};
        var inline = new InlineKeyboardMarkup(buttons);

        return new Message(text, inline);
    }

    public static Message FinishChangeRoutineActions()
    {
        var text = $"–†—É—Ç–∏–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!";
        var buttons = Array.Empty<InlineKeyboardButton>();
        var inline = new InlineKeyboardMarkup(buttons);

        return new Message(text, inline);
    }

    public static Message RoutineWeekendStatus(List<WeekRoutineAction> routineActions)
    {
        var text = "–ù–∞–∂–º–∏ –Ω–∞ —Ä—É—Ç–∏–Ω–Ω–æ–µ –¥–µ–ª–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ";
        var buttons = routineActions.Select((action) =>
                new[]
                {
                    new InlineKeyboardButton($"{action.Action} {action.WeekCount}/7")
                    {
                        CallbackData = CommandsConstants.CheckupRoutineAction(action.ActionId)
                    }
                })
            .Append(
                new[]
                {
                    new InlineKeyboardButton($"–ó–∞–∫–æ–Ω—á–∏—Ç—å")
                    {
                        CallbackData = CommandsConstants.FinishCheckupRoutineActions
                    }
                });

        var inline = new InlineKeyboardMarkup(buttons);

        return new Message(text, inline);
    }

    public static Message FinishCheckup()
    {
        var text = $"–í—Å–µ –∑–∞–ø–∏—Å–Ω–æ!";
        var buttons = Array.Empty<InlineKeyboardButton>();
        var inline = new InlineKeyboardMarkup(buttons);

        return new Message(text, inline);
    }
}